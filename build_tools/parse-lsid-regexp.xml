    <!-- 
      Define 'parse-lsid-regexp' as an alternative implementation using regular expressions.
      The macrodef is included in a target so that 'antcontrib' can be declared as a dependency.
      Requirements:
          Ant-Contrib Tasks, needed for the propertyregex task 

      Note: This uses the java.util.regex.Pattern class for evaluating regular expressions.
          http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html

      Option 1, requires {lsid.version}
          urn:lsid:([^\:]*):([^\:]*):([^\:]*):([^\:]*)
      Option 2, handles missing {lsid.version}
          urn:lsid:([^\:]*):([^\:]*):([^\:]*)(:([^\:]*)|)
    -->
    <target name="require-propertyregex" depends="require-antcontrib" />
    <target name="define-parse-lsid-regexp" depends="require-propertyregex">

        <macrodef name="set-lsid-no-version">
            <attribute name="prefix" />
            <sequential>
                <property name="@{prefix}lsid.no_version" 
                    value="urn:lsid:${@{prefix}lsid.authority}:${@{prefix}lsid.namespace}:${@{prefix}lsid.identifier}" />
            </sequential>
        </macrodef>

        <macrodef name="parse-lsid-regexp">
            <attribute name="lsid" description="the lsid" />
            <attribute name="prefix" default="" 
                description="prefix to prepend to the lsid.* property names; similar to 'prefix' attribute of the property task" 
            />

            <sequential>
                <!-- if necessary, append '.' to prefix -->
                <local name="lsid.prefix" />
                <propertyregex property="lsid.prefix" 
                    input="@{prefix}" 
                    regexp="^(.+?)(\.?$)"
                    select="\1."
                    defaultValue="@{prefix}" />

                <echo if:true="${verbose}">lsid='@{lsid}'</echo>
                <echo if:true="${verbose}">         prefix='@{prefix}'</echo>
                <echo if:true="${verbose}">    lsid.prefix='${lsid.prefix}'</echo>

                <local name="lsid.regexp" />
                <property name="lsid.regexp" 
                    value="urn:lsid:([^\:]*):([^\:]*):([^\:]*)(:([^\:]*)|)" 
                />

                <propertyregex property="${lsid.prefix}lsid.authority" 
                    input="@{lsid}" regexp="${lsid.regexp}" casesensitive="false"
                    replace="\1" />

                <propertyregex property="${lsid.prefix}lsid.namespace" 
                    input="@{lsid}" regexp="${lsid.regexp}" casesensitive="false"
                    replace="\2" />

                <propertyregex property="${lsid.prefix}lsid.identifier" 
                    input="@{lsid}" regexp="${lsid.regexp}" casesensitive="false"
                    replace="\3" />

                <!-- Note: \4 vs \5 -->
                <propertyregex property="${lsid.prefix}lsid.version" 
                    input="@{lsid}" regexp="${lsid.regexp}" casesensitive="false"
                    replace="\5"
                    defaultValue=""
                />

                <set-lsid-no-version prefix="${lsid.prefix}" />
                <echo-lsid if:true="${verbose}" 
                    prefix="@{prefix}" show-version-details="false" />
            </sequential>
        </macrodef>
    </target>

    <target name="test-parse-lsid-regexp-suite" depends="define-parse-lsid-regexp, load-manifest"
        description="for testing the parse-lsid-regexp macrodef"
    >
        <property name="verbose" value="true" />

        <fail-if-not-set prop="demo-baselsid" />
        <parse-lsid-regexp lsid="${demo-baselsid}"       prefix="test.01" />
        <parse-lsid-regexp lsid="${demo-baselsid}:1"     prefix="test.02" />
        <parse-lsid-regexp lsid="${demo-baselsid}:0.1"   prefix="test.03" />
        <parse-lsid-regexp lsid="${demo-baselsid}:0.0.1" prefix="test.04" />

        <parse-lsid-regexp lsid="${demo-baselsid}:2"     prefix="test.05" />
        <parse-lsid-regexp lsid="${demo-baselsid}:2.1"   prefix="test.06" />
        <parse-lsid-regexp lsid="${demo-baselsid}:2.0.1" prefix="test.07" />

        <parse-lsid-regexp lsid="${demo-baselsid}:4.8.33" prefix="test.08" />

        <!-- invalid lsid ... -->
        <parse-lsid-regexp lsid="${demo-baselsid}:v1" prefix="test.09" />
        <parse-lsid-regexp lsid="${demo-baselsid}:v1.2" prefix="test.10" />
        <parse-lsid-regexp lsid="${demo-baselsid}:v1.2.5" prefix="test.11" />
    </target>
